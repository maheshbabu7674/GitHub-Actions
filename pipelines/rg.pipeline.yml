name: $(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: pipeline_task
    type: string
    displayName: "Task"
    default: 'Plan only'
    values:
      - 'Plan only'
      - 'Plan and Apply'
      - 'Plan and Destroy'

  - name: targets
    type: object
    default:
    - resourcegroupName: YourResourcegroup

trigger:
  - none

stages:
- ${{ each target in parameters.targets }}:
  - stage: root_module_for_${{ replace(target.resourcegroupName, '-', '_') }}
    condition: always()
    pool:
      vmImage: 'windows-latest'

    jobs:
    - job:
      steps:

      - checkout: self
        displayName: 'Checkout repository'

      - task: AzurePowerShell@5
        inputs:
          azureSubscription: 'sc-image-definition-devops-sc'
          ScriptType: 'InlineScript'
          Inline: |
            # Variables
            $WorkingDir = "$(System.DefaultWorkingDirectory)\resourcegroups\${{ target.resourcegroupName }}"
            $TerraformVersion = "1.0.0"
            $TerraformZip = "terraform_${TerraformVersion}_windows_amd64.zip"
            $TerraformUrl = "https://releases.hashicorp.com/terraform/$TerraformVersion/$TerraformZip"
            $TerraformPath = "$env:ProgramFiles\Terraform"

            # Create the Terraform directory
            if (-not (Test-Path -Path $TerraformPath)) {
              New-Item -Path $TerraformPath -ItemType Directory
            }

            # Download and install Terraform
            Invoke-WebRequest -Uri $TerraformUrl -OutFile $TerraformZip
            Expand-Archive -Path $TerraformZip -DestinationPath $TerraformPath
            $env:PATH += ";$TerraformPath"
            terraform --version

            # Initialize Terraform
            terraform -chdir=$WorkingDir init

            # Plan only
            if ($env:PIPELINETASK -eq 'Plan only') {
              terraform -chdir=$WorkingDir plan
            }

            # Plan and Apply
            if ($env:PIPELINETASK -eq 'Plan and Apply') {
              terraform -chdir=$WorkingDir plan
              terraform -chdir=$WorkingDir apply -auto-approve
            }

            # Plan and Destroy
            if ($env:PIPELINETASK -eq 'Plan and Destroy') {
              terraform -chdir=$WorkingDir plan
              terraform -chdir=$WorkingDir destroy -auto-approve
            }
          ScriptPath: 'inline'
          azurePowerShellVersion: 'LatestVersion'
        displayName: 'Install Terraform and Run Commands'