name: $(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: pipeline_task
    type: string
    displayName: "Task"
    default: 'Plan only'
    values:
      - 'Plan only'
      - 'Plan and Apply'
      - 'Plan and Destroy'

  - name: targets
    type: object
    default:
    - resourcegroupName: YourResourcegroup


variables:
  - group: resource-provisioning

trigger:
  - none

stages:
- ${{ each target in parameters.targets }}:
  - stage: root_module_for_${{ replace(target.resourcegroupName, '-', '_')  }}
    condition: always()
    pool:
      vmImage: 'ubuntu-latest'

    jobs:
    - job: job_Tf_execution
      steps:

      - checkout: self
        displayName: 'Checkout repository'

      - task: TerraformInstaller@0
        displayName: 'Install Terraform latest version'

      - task: PowerShell@2
        displayName: terraform init
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/resourcegroups/${{ target.resourcegroupName }}"
          targetType: inline
          script: |
            terraform.exe init
        env:
          ARM_CLIENT_ID : $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET : $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID : $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID : $(ARM_TENANT_ID)

      - task: PowerShell@2
        displayName: terraform plan
        condition: or(eq('${{parameters.pipeline_task}}', 'Plan and Apply'),eq('${{parameters.pipeline_task}}', 'Plan and Destroy'),eq('${{parameters.pipeline_task}}', 'Plan only'))
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/resourcegroups/${{ target.resourcegroupName }}"
          targetType: inline
          script: |
            terraform plan
        env:
          ARM_CLIENT_ID : $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET : $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID : $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID : $(ARM_TENANT_ID)

      - task: PowerShell@2
        displayName: terraform apply
        condition: eq('${{parameters.pipeline_task}}', 'Plan and Apply')
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/resourcegroups/${{ target.resourcegroupName }}"
          targetType: inline
          script: |
            terraform apply -auto-approve
        env:
          ARM_CLIENT_ID : $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET : $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID : $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID : $(ARM_TENANT_ID)

      - task: PowerShell@2
        displayName: terraform destroy
        condition: eq('${{parameters.pipeline_task}}', 'Plan and Destroy')
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/resourcegroups/${{ target.resourcegroupName }}"
          targetType: inline
          script: |
            terraform destroy -auto-approve
        env:
          ARM_CLIENT_ID : $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET : $(ARM_CLIENT_SECRET)
          ARM_SUBSCRIPTION_ID : $(ARM_SUBSCRIPTION_ID)
          ARM_TENANT_ID : $(ARM_TENANT_ID)